@using System.Threading
@using Soenneker.Blazor.Tippy.Abstract
@using Soenneker.Blazor.Tippy.Configuration
@using Soenneker.Extensions.ValueTask
@using Soenneker.Extensions.CancellationTokens

@inject ITippyInterop TippyInterop

@inherits Soenneker.Quark.Components.Cancellable.CancellableComponent

<div id="@ElementId" @attributes="Attributes" ></div>

@code {
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object?>? Attributes { get; set; }

    [Parameter]
    public TippyConfiguration Configuration { get; set; } = new();

    public string ElementId = $"tippy-{Guid.NewGuid().ToString()}";

    protected override async Task OnInitializedAsync()
    {
        await TippyInterop.Initialize(ElementId, Configuration, CancellationToken);
    }

    public async ValueTask Show(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TippyInterop.Show(ElementId, linked);
    }

    public async ValueTask Hide(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TippyInterop.Hide(ElementId, linked);
    }

    public async ValueTask Destroy(CancellationToken cancellationToken = default)
    {
        CancellationToken linked = CancellationToken.Link(cancellationToken, out CancellationTokenSource? cts);

        using (cts)
            await TippyInterop.Destroy(ElementId, linked);
    }
}
